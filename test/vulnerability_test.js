/* eslint no-unused-vars: 0 */
/* eslint eqeqeq: 0 */

const { expect, assert } = require('chai');
const {
  BN,
  // constants,
  expectEvent,
  expectRevert,
  ether,
  time,
} = require('@openzeppelin/test-helpers');
const common = require('./utils/common');
const constants = require('./utils/constants');
const environment = require('./utils/environment');
const { people, setPeople } = require('./utils/accounts');

let mockXBE;
let vault;
let votingStakingRewards;
let simpleXBEInflation;
let mockLPHive;
let registry;
let controller;

contract('Vault Vulnerability Test', (accounts) => {
  setPeople(accounts);

  beforeEach(async () => {
    [
      mockXBE,
      registry,
      mockLPHive,
      controller,
      vault,
      votingStakingRewards,
      simpleXBEInflation
    ] = await environment.getGroup(
      [
        'MockXBE',
        'MockCRV',
        'MockCVX',
        'Registry',
        'MockLPHive',
        'ConvexBooster',
        'ConvexCVXRewards',
        'ConvexCRVRewards',
        'Treasury',
        'LockSubscription',
        'VeXBE',
        'Controller',
        'Vault',
        'HiveStrategy',
        'ReferralProgram',
        'BonusCampaign',
        'SimpleXBEInflation',
        'VotingStakingRewards',
      ],
      (key) => [
        "MockXBE",
        "Registry",
        "Controller",
        'MockLPHive',
        'VotingStakingRewards',
        'Vault',
        'SimpleXBEInflation'
      ].includes(key),
      true
    );
  });

  it('should prevent vulnerability', async () => {

      const owner = await common.waitFor('owner', people);
      const alice = await common.waitFor('alice', people);
      const bob = await common.waitFor('bob', people);

      await vault.setRewardsDistribution(owner, { from: owner });
      await vault.setFeesEnabled(false, { from: owner });

      // await controller.setVault(mockLPHive.address, vault.address);

      // console.log(registry);
      // await registry.addVault(vault.address, { from: owner });

      const rewardAmount = ether('10');

      await mockXBE.mint(vault.address, rewardAmount);
      await vault.notifyRewardAmount(mockXBE.address, rewardAmount, { from: owner });

      const stakeAmount = ether('1');
      const period = time.duration.days(30);

      await mockLPHive.approve(vault.address, stakeAmount, { from: alice });
      await vault.deposit(stakeAmount, { from: alice });

      await time.increase(period);

      console.log((await vault.earned(mockXBE.address, alice)).toString());

      await vault.approve(bob, stakeAmount, { from: alice });
      await vault.transfer(bob, stakeAmount, { from: alice });

      console.log((await vault.earned(mockXBE.address, bob)).toString());

  });

});
